package models

import (
	"testing"
	"time"

	bot "github.com/MixinNetwork/bot-api-go-client"
	"github.com/stretchr/testify/assert"
)

func TestMessageCRUD(t *testing.T) {
	assert := assert.New(t)
	ctx := setupTestContext()
	defer teardownTestContext(ctx)

	id, uid := bot.NewV4().String(), bot.NewV4().String()
	data := []byte("hello")
	message, err := CreateMessage(ctx, id, uid, "PLAIN_TEXT", data, time.Now(), time.Now())
	assert.Nil(err)
	assert.NotNil(message)
	message, err = CreateMessage(ctx, id, uid, "PLAIN_IMAGE", data, time.Now(), time.Now())
	assert.Nil(err)
	assert.NotNil(message)
	assert.Equal("PLAIN_IMAGE", message.Category)
	assert.True(message.LastDistributeAt.IsZero())
	messages, err := PendingMessages(ctx, 100)
	assert.Nil(err)
	assert.Len(messages, 1)

	message, err = CreateMessage(ctx, bot.NewV4().String(), uid, "PLAIN_TEXT", data, time.Now(), time.Now())
	assert.Nil(err)
	assert.NotNil(message)
	assert.Equal("PLAIN_TEXT", message.Category)
	assert.True(message.LastDistributeAt.IsZero())
	messages, err = PendingMessages(ctx, 100)
	assert.Nil(err)
	assert.Len(messages, 2)

	user, err := createUser(ctx, "accessToken", bot.NewV4().String(), "10000", "name", "http://localhost")
	ids, date, err := subscribedUserIds(ctx, message.LastDistributeAt, 100)
	assert.Nil(err)
	assert.True(date.IsZero())
	assert.Len(ids, 0)
	err = user.Subscribe(ctx)
	assert.Nil(err)
	ids, date, err = subscribedUserIds(ctx, message.LastDistributeAt, 100)
	assert.Nil(err)
	assert.False(date.IsZero())
	assert.Len(ids, 1)

	err = message.Distribute(ctx)
	assert.Nil(err)
	dms, err := PendingDistributedMessages(ctx, 100)
	assert.Nil(err)
	assert.Len(dms, 1)
	assert.Equal(ids[0], dms[0].RecipientId)
	user, err = createUser(ctx, "accessToken", bot.NewV4().String(), "10000", "name", "http://localhost")
	assert.Nil(err)
	err = user.Subscribe(ctx)
	assert.Nil(err)
	ids, date, err = subscribedUserIds(ctx, message.LastDistributeAt, 100)
	assert.Nil(err)
	assert.Len(ids, 1)
	messages, err = PendingMessages(ctx, 100)
	assert.Nil(err)
	assert.Len(messages, 1)
	err = messages[0].Distribute(ctx)
	assert.Nil(err)
	dms, err = PendingDistributedMessages(ctx, 100)
	assert.Nil(err)
	assert.Len(dms, 3)
	messages, err = PendingMessages(ctx, 100)
	assert.Nil(err)
	assert.Len(messages, 0)

	ids, err = ExpiredDistributedMessageIds(ctx)
	assert.Nil(err)
	assert.Len(ids, 0)
	WriteProperty(ctx, MessageQueueCheckpoint, dms[0].CreatedAt.Format(time.RFC3339Nano))
	ids, err = ExpiredDistributedMessageIds(ctx)
	assert.Nil(err)
	assert.Len(ids, 0)
	WriteProperty(ctx, MessageQueueCheckpoint, dms[2].CreatedAt.Format(time.RFC3339Nano))
	ids, err = ExpiredDistributedMessageIds(ctx)
	assert.Nil(err)
	assert.Len(ids, 2)
	err = CleanUpExpiredDistributedMessages(ctx, ids)
	assert.Nil(err)
	ids, err = ExpiredDistributedMessageIds(ctx)
	assert.Nil(err)
	assert.Len(ids, 0)
	WriteProperty(ctx, MessageQueueCheckpoint, time.Now().Format(time.RFC3339Nano))
	ids, err = ExpiredDistributedMessageIds(ctx)
	assert.Nil(err)
	assert.Len(ids, 1)
}
